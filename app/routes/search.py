from flask import Blueprint, request, jsonify
import requests
import json
import re

bp = Blueprint('search', __name__)

@bp.route('/search')
def search():
    q = request.args.get('q', '').strip().upper()  # Chu·∫©n h√≥a query th√†nh ch·ªØ hoa
    print(f"üîç Truy v·∫•n nh·∫≠n ƒë∆∞·ª£c: {q}")  # In ra ƒë·ªÉ debug

    if not q:
        return jsonify(results=[])

    # G·ª≠i y√™u c·∫ßu ƒë·∫øn TradingView Symbol Search API
    url = "https://symbol-search.tradingview.com/symbol_search/v3/"
    params = {
        "text": q,  # T√¨m ki·∫øm v·ªõi token t·ª´ query
        "hl": "1",
        "exchange": "AMEX,BSE,CBOE,NASDAQ,NSE,NYSE",
        "lang": "vi",  # Ng√¥n ng·ªØ
        "only_has_options": "true",  # Ch·ªâ nh·ªØng c·∫∑p c√≥ quy·ªÅn ch·ªçn (tu·ª≥ ch·ªçn)
        "domain": "production",
        "sort_by_country": "VN",
        "promo": "true"
    }

    # Headers c·ªßa TradingView API
    headers = {
        "authority": "symbol-search.tradingview.com",
        "accept": "*/*",
        "accept-language": "vi,en-US;q=0.9,en;q=0.8",
        "dnt": "1",
        "origin": "https://vn.tradingview.com",
        "referer": "https://vn.tradingview.com/",
        "sec-ch-ua": '"Not)A;Brand";v="8", "Chromium";v="138", "Microsoft Edge";v="138"',
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": '"Windows"',
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-site",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0"
    }

    try:
        # G·ª≠i y√™u c·∫ßu GET ƒë·∫øn TradingView API
        res = requests.get(url, headers=headers, params=params)

        # Ki·ªÉm tra m√£ tr·∫°ng th√°i HTTP
        print(f"Status Code: {res.status_code}")

        if res.status_code == 200:
            data = res.json()
            print("Data received:")
            print(json.dumps(data, indent=4))  # In d·ªØ li·ªáu v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp

            # L·ªçc v√† tr·∫£ v·ªÅ c√°c symbol t√¨m ƒë∆∞·ª£c
            results = []
            for item in data.get('symbols', []):
                symbol = item.get("symbol", "")
                description = item.get("description", "")
                exchange = item.get("exchange", "")

                # Lo·∫°i b·ªè c√°c th·∫ª HTML trong symbol v√† description
                symbol = re.sub(r'<.*?>', '', symbol)  # Lo·∫°i b·ªè th·∫ª HTML trong symbol
                description = re.sub(r'<.*?>', '', description)  # Lo·∫°i b·ªè th·∫ª HTML trong description

                if ":" not in symbol or "/" not in symbol:
                    continue  # B·ªè qua nh·ªØng symbol kh√¥ng h·ª£p l·ªá

                # T√°ch tokenA v√† tokenB t·ª´ symbol
                try:
                    tokenA, tokenB = symbol.split(":")[1].split("/")
                    # T·∫°o c·∫•u tr√∫c k·∫øt qu·∫£ theo y√™u c·∫ßu: TokenA/TokenB T√™n s√†n
                    results.append({
                        "token_pair": f"{tokenA}/{tokenB}",
                        "description": description,
                        "exchange": exchange,
                    })
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi t√°ch symbol: {symbol} - {e}")
                    continue  # B·ªè qua n·∫øu c√≥ l·ªói trong vi·ªác t√°ch symbol
            return jsonify(results=results)
        else:
            print("L·ªói khi g·ªçi TradingView API:", res.status_code)
            return jsonify(results=[])

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi g·ªçi TradingView API: {e}")
        return jsonify(results=[])
